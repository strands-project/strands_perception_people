--- cudaHOG.cpp	2012-07-10 09:27:01.000000000 +0100
+++ cudaHOG.cpp	2013-08-13 09:50:36.413358001 +0100
@@ -47,6 +47,14 @@
 
 namespace cudaHOG {
 
+struct Exeption {};
+
+template <typename X, typename A>
+inline void Assert(A assertion)
+{
+    if( !assertion ) throw X();
+}
+
 Parameters g_params;
 std::vector<ROI> g_roi;
 
@@ -124,12 +132,12 @@
 
 int cudaHOGManager::load_svm_models()
 {
-	assert(g_params.path.size() > 0 );
+    Assert<Exeption>(g_params.path.size() > 0 );
 
 	printf("# models: %d\n", g_params.models.size());
 
 	for(size_t ii=0; ii < g_params.models.size(); ii++ ) {
-		assert(g_params.models[ii].identifier.size() > 0 );
+        Assert<Exeption>(g_params.models[ii].identifier.size() > 0 );
 
 		string fnModel;
 		if( g_params.models[ii].filename.length() > 0 )
@@ -387,9 +395,9 @@
 	float x = left;
 	float p = (E(1,0) * x + E(2,1) ) / E(1,1);
 
-	assert( p*p >= ((E(0,0)*x + E(2,2) + 2*E(2,0)*x) ));
-	assert( E(1,1) != 0.f );
-    assert( p*p - ((E(0,0)*x + E(2,2) + 2*E(2,0)*x) / E(1,1)) >= 0 );
+    Assert<Exeption>( p*p >= ((E(0,0)*x + E(2,2) + 2*E(2,0)*x) ));
+    Assert<Exeption>( E(1,1) != 0.f );
+    Assert<Exeption>( p*p - ((E(0,0)*x + E(2,2) + 2*E(2,0)*x) / E(1,1)) >= 0 );
 
 	float root = sqrtf( p*p - ((E(0,0)*x + E(2,2) + 2*E(2,0)*x) / E(1,1)));
 	yl_0 = -p + root;
@@ -408,7 +416,7 @@
 	x = right;
 	p = (E(1,0) * x + E(2,1) ) / E(1,1);
 
-    assert( p*p - ((E(0,0)*x + E(2,2) + 2*E(2,0)*x) / E(1,1)) >= 0 );
+    Assert<Exeption>( p*p - ((E(0,0)*x + E(2,2) + 2*E(2,0)*x) / E(1,1)) >= 0 );
 
 	root = sqrtf( p*p - ((E(0,0)*x + E(2,2) + 2*E(2,0)*x) / E(1,1)));
 	yr_0 = -p + root;
@@ -497,7 +505,7 @@
 	min_y = min( max_height_y_l, max_height_y_r);
 	max_y = max( min_height_y_l, min_height_y_r);
 
-	assert( min_y <= max_y );
+    Assert<Exeption>( min_y <= max_y );
 	if( min_y > max_y ) {
 		// invalid ROI
 		min_x =INT_MAX; min_y =INT_MAX; max_x =INT_MIN; max_y =INT_MIN;
@@ -759,9 +767,9 @@
 		sOutput.write((char*)&(features[i].target), sizeof(float));
 		for(size_t j=0; j < features[i].values.size(); j++) {
 #ifdef WIN32
-			assert(! _isnan(features[i].values[j]) );
+            Assert<Exeption>(! _isnan(features[i].values[j]) );
 #else
-			assert(! isnan(features[i].values[j]) );
+            Assert<Exeption>(! isnan(features[i].values[j]) );
 #endif
 			sOutput.write((char*)&(features[i].values[j]), sizeof(float));
 		}
@@ -822,7 +830,10 @@
 
 	int res = test_image(all_dets);
 
-	detections = all_dets[0];
+    if(all_dets.size() > 0)
+        detections = all_dets[0];
+
+
 
 	return res;
 }
@@ -845,9 +856,10 @@
 
 	int res =  hog_process_image_multiscale(imgWidth, imgHeight, g_roi, &cntBlocks, &cntSVM, timings, detections);
 	release_image();
-
-	printf("HOG Blocks: %d\n", cntBlocks);
-	printf("SVM evaluations: %d\n", cntSVM);
+    if( PRINT_DEBUG_INFO ) {
+        printf("HOG Blocks: %d\n", cntBlocks);
+        printf("SVM evaluations: %d\n", cntSVM);
+    }
 
 	if( res )
 		return 1;
@@ -1052,7 +1064,7 @@
 
 			// only one model should be loaded!
 			// we only want results from this one model!
-			assert(tmp_false_positives.size() == 1 );
+            Assert<Exeption>(tmp_false_positives.size() == 1 );
 
 			for(size_t jj=0; jj < tmp_false_positives[0].size(); jj++) {
 				FalsePositive fp;
